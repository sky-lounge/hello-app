---
name: Production Release - main branch
on:
  push:
    branches:
    - main
    paths:
    - public/**
    - nginx.conf
jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    env:
      REGISTRY: us-west1-docker.pkg.dev/sky-lounge-director/skylounge-images
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v3
    - name: Set image name
      run: |
        sha=$(cat deployed-version.txt)
        echo "IMAGE_NAME=${{ env.REGISTRY }}/${{ github.event.repository.name }}:${sha}" >> $GITHUB_ENV
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0
      with:
        credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
    - id: deploy
      uses: google-github-actions/deploy-cloudrun@v0
      with:
        service: "${{ github.event.repository.name }}-${{ github.ref_name }}"
        image: "${{ env.IMAGE_NAME }}"
  load-balancer:
    needs: deploy
    name: Create and configure load balancer
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: lifecycle-templates/cloud-run/terraform
    steps:
    - uses: actions/checkout@v3
      with:
        repository: sky-lounge/skylounge-definitions
        ref: main
        token: "${{ secrets.SL_BOT_TOKEN }}"
    - uses: hashicorp/setup-terraform@v2
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0
      with:
        credentials_json: "${{ secrets.GOOGLE_CREDENTIALS }}"
    - name: Prepare Backend Config
      run: |
        cat << EOF > config.gcs.tfbackend
        bucket = "$TF_STATE_BUCKET"
        prefix = "${REPO_NAME}-${REPO_BRANCH}"
        EOF
      env:
        TF_STATE_BUCKET: skylounge-tfstate.rscale.io
        REPO_NAME: "${{ github.event.repository.name }}"
        REPO_BRANCH: "${{ github.ref_name }}"
    - name: Terraform Init
      run: terraform init -backend-config=config.gcs.tfbackend
    - name: Prepare Terraform Vars File
      run: |
        cat << EOF > terraform.tfvars
        gcp_project_id     = "$GCP_PROJECT_ID"
        gcp_region = "$GCP_REGION"
        service_name = "$SERVICE_NAME"
        domain = "$DOMAIN"
        dns_zone_name = "$DNS_ZONE_NAME"
        EOF
      env:
        GCP_PROJECT_ID: sky-lounge-director
        GCP_REGION: us-central1
        SERVICE_NAME: "${{ github.event.repository.name }}-${{ github.ref_name }}"
        DOMAIN: demo.skylounge.io
        DNS_ZONE_NAME: skyloungeio
    - name: Terraform Apply
      run: |
        terraform apply -auto-approve
